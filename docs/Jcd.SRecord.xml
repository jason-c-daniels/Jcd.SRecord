<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Jcd.SRecord</name>
    </assembly>
    <members>
        <member name="T:Jcd.SRecord.Extensions.CharExtensions">
            <summary>
            A set of utility methods for interacting with <c>char</c>s.
            </summary>
        </member>
        <member name="M:Jcd.SRecord.Extensions.CharExtensions.IsHexDigit(System.Char)">
            <summary>
             Returns true if a character is a hexadecimal digit.
            </summary>
            <param name="character">the character to inspect.</param>
            <returns>True if the character</returns>
        </member>
        <member name="M:Jcd.SRecord.Extensions.CharExtensions.GetHexValue(System.Char)">
            <summary>
            Gets the value from a hexadecimal digit.
            </summary>
            <param name="digit">The digit to evaluate.</param>
            <returns>The numeric value.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the character isn't actually a hexadecimal digit.</exception>
        </member>
        <member name="M:Jcd.SRecord.Extensions.CharExtensions.ThrowArgumentExceptionIfNotValidForSRecordComment(System.Char)">
            <summary>
            Throws an ArgumentException if the character can't be used for an SRecordData comment.
            </summary>
            <param name="character">the character to check.</param>
            <exception cref="T:System.ArgumentException">Thrown if the character is invalid.</exception>
        </member>
        <member name="T:Jcd.SRecord.Extensions.HexStringConversions">
            <summary>
            A set of extension methods to help in converting
            to and from hexadecimal representations of bytes 
            </summary>
        </member>
        <member name="M:Jcd.SRecord.Extensions.HexStringConversions.HexStringToBytes(System.ReadOnlySpan{System.Char})">
            <summary>
            Converts a sequence of hexadecimal characters into the equivalent bytes. 
            </summary>
            <param name="hexString">the text to convert.</param>
            <returns>The sequence of bytes represented by the hex string.</returns>
        </member>
        <member name="M:Jcd.SRecord.Extensions.HexStringConversions.HexStringToBytes(System.String)">
            <summary>
            Converts a sequence of hexadecimal characters into the equivalent bytes. 
            </summary>
            <param name="hexString">the text to convert.</param>
            <returns>The sequence of bytes represented by the hex string.</returns>
        </member>
        <member name="M:Jcd.SRecord.Extensions.HexStringConversions.BytesToHexString(System.ReadOnlySpan{System.Byte},System.Boolean)">
            <summary>
            Convert a sequence of bytes into a string of hexadecimal values. 
            </summary>
            <param name="bytes">the bytes to convert</param>
            <param name="makeUppercase">makes the A-F range uppercase when true, lowercase otherwise</param>
            <returns>The hexadecimal text representation</returns>
        </member>
        <member name="M:Jcd.SRecord.Extensions.HexStringConversions.MakeByte(System.Char,System.Char)">
            <summary>
            Given a pair of hexadecimal characters, convert them into the single
            byte equivalent.
            </summary>
            <param name="highNybble"></param>
            <param name="lowNybble"></param>
            <returns>The converted value.</returns>
        </member>
        <member name="T:Jcd.SRecord.ISRecordDataFormatter">
            <summary>
            Defines the operations necessary to support formatting an <c>SRecordData</c>
            into text.
            </summary>
        </member>
        <member name="P:Jcd.SRecord.ISRecordDataFormatter.EmitHexNumbersInUpperCase">
            <summary>
            Indicates if the hex numbers should be uppercase (true)
            or lowercase (false).
            </summary>
        </member>
        <member name="M:Jcd.SRecord.ISRecordDataFormatter.Format(Jcd.SRecord.SRecordData)">
            <summary>
            Converts an SRecordData into its ASCII-HEX representation.
            </summary>
            <param name="sRecord">the record to format</param>
            <returns>The formatted string (S0030000FC...etc)</returns>
        </member>
        <member name="T:Jcd.SRecord.ISRecordDataParser">
            <summary>
            Defines the operations necessary in order to support parsing text into
            <c>SRecordData</c> instances.
            </summary>
        </member>
        <member name="M:Jcd.SRecord.ISRecordDataParser.Parse(System.String)">
            <summary>
            Parses a line of text into an <c>SRecordData, ignoring trailing whitespace.</c>
            </summary>
            <param name="lineOfText">The line of text to parse.</param>
            <returns>An <c>SRecordData</c> instance if it was successfully parsed.</returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Jcd.SRecord.ISRecordDataParser.TryParse(System.String,Jcd.SRecord.SRecordData@)">
            <summary>
            Tries parsing a line of text into an <c>SRecordData</c>
            </summary>
            <param name="lineOfText">the text to try parsing.</param>
            <param name="sRecord">The result of parsing. null if not parsed.</param>
            <returns>true if successful</returns>
        </member>
        <member name="T:Jcd.SRecord.ISRecordElementFormatter">
            <summary>
            Defines the operations necessary to support formatting
            <c>SRecordElement</c>s to lines of text.
            </summary>
        </member>
        <member name="M:Jcd.SRecord.ISRecordElementFormatter.Format(Jcd.SRecord.SRecordElement)">
            <summary>
            Formats an <c>SRecordElement</c> as a element of text.
            </summary>
            <param name="element">the element to format.</param>
            <returns>
            Null indicates no element was generated. String.Empty indicates
            that a blank element was generated. <c>SRecordElementWriter</c>
            will discard null results. Depending on options settings, it may write
            blank lines.
            </returns>
        </member>
        <member name="E:Jcd.SRecord.ISRecordElementFormatter.Formatting">
            <summary>
            An event indicating that formatting has begun.
            </summary>
        </member>
        <member name="E:Jcd.SRecord.ISRecordElementFormatter.Formatted">
            <summary>
            An event that indicates formatting has finished.
            </summary>
        </member>
        <member name="T:Jcd.SRecord.ISRecordElementParser">
            <summary>
            Defines the operations necessary to parse <c>SRecordElement</c>s
            from text.
            </summary>
        </member>
        <member name="P:Jcd.SRecord.ISRecordElementParser.AllowComments">
            <summary>
            A flag indicating if comments will be parsed and removed before interpreting
            the <c>SRecordData</c> data.
            </summary>
        </member>
        <member name="M:Jcd.SRecord.ISRecordElementParser.Parse(System.Int32,System.String)">
            <summary>
            Parses a line of text into an SRecordElement.
            </summary>
            <param name="lineNumber">The line number.</param>
            <param name="lineOfText">The raw text.</param>
            <returns>an SRecordElement describing the parsing results.</returns>
        </member>
        <member name="E:Jcd.SRecord.ISRecordElementParser.Parsing">
            <summary>
            An event indicating that parsing has begun.
            </summary>
        </member>
        <member name="E:Jcd.SRecord.ISRecordElementParser.Parsed">
            <summary>
            An event that indicates parsing has finished.
            </summary>
        </member>
        <member name="T:Jcd.SRecord.SRecordData">
            <summary>
            Represents a single <c>SRecordData</c> entry in an s-record file. This is an immutable type.
            To edit the contents, create a new one with the altered data buffer, address, and/or type.
            </summary>
            <remarks>
            Further reading about the SRecordData format can be done
            <see href="https://manpages.ubuntu.com/manpages/trusty/man5/srec.5.html"> at the Ubuntu manpage</see>
            and <see href="https://en.wikipedia.org/wiki/SREC_(file_format)">the wikipedia page</see>.
            </remarks>
        </member>
        <member name="F:Jcd.SRecord.SRecordData.CheckSumByteLength">
            <summary>
            The length of the checksum, in bytes.
            </summary>
        </member>
        <member name="F:Jcd.SRecord.SRecordData.CountByteLength">
            <summary>
            The length of the count in bytes
            </summary>
        </member>
        <member name="F:Jcd.SRecord.SRecordData.KeyCharLength">
            <summary>
            The length of the record key in characters.
            </summary>
        </member>
        <member name="F:Jcd.SRecord.SRecordData.MaxValueForCount">
            <summary>
            The maximum value for the count field. 
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordData.Type">
            <summary>
            The type of SRecordData
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordData.CountOfRemainingBytes">
            <summary>
            The total count of the address, data, and checksum bytes.
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordData.Address">
            <summary>
            If applicable, the address for data to be written to, or in some cases, a count of preceding records.
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordData.EndAddress">
            <summary>
            The computed address of the last byte of data contained in this record.
            For records with 0 data length, this will contain the same value as Address. 
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordData.Data">
            <summary>
            The data to be loaded into the address. (or in S0's case a descriptor for the file.)
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordData.Checksum">
            <summary>
            The checksum for the type, address, and data.
            </summary>
        </member>
        <member name="M:Jcd.SRecord.SRecordData.#ctor(Jcd.SRecord.SRecordDataType,System.UInt32,System.Nullable{System.ReadOnlyMemory{System.Byte}})">
            <summary>
            Constructs a mew SRecordData instance.
            </summary>
            <param name="type">The type descriptor for the SRecordData</param>
            <param name="address">The data for the address field.</param>
            <param name="data">The data for the data field, if any.</param>
            <exception cref="T:System.ArgumentException">
            When various constraints are violated such as too big of an
            address for a given record type. See the specification for details.
            </exception>
        </member>
        <member name="M:Jcd.SRecord.SRecordData.ComputeChecksum(Jcd.SRecord.SRecordDataType,System.Byte,System.UInt32,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Computes the checksum for the record.
            </summary>
            <param name="type">The type descriptor for the record.</param>
            <param name="count">The count of bytes following</param>
            <param name="address">The data for the address field.</param>
            <param name="data">The data for the data field, if any.</param>
            <returns>The checksum</returns>
            <remarks>This checksum is a sum-complement type checksum which returns
            the one's complement of the least significant byte of the sum of
            all bytes after the record type indicator (S0...etc.).
            See <see href="https://en.wikipedia.org/wiki/SREC_(file_format)"/>
            for reading about this specific checksum algorithm.
            </remarks>
        </member>
        <member name="T:Jcd.SRecord.SRecordDataFormatter">
            <summary>
            Encapsulates the formatting logic required to emit a single SRecordData
            with consistent hex value casing.
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordDataFormatter.EmitHexNumbersInUpperCase">
            <summary>
            Indicates if the hex numbers should be uppercase (true) or lowercase (false)
            </summary>
        </member>
        <member name="F:Jcd.SRecord.SRecordDataFormatter.UppercaseHex">
            <summary>
            And instance preconfigured to emit uppercase hex values.
            </summary>
        </member>
        <member name="F:Jcd.SRecord.SRecordDataFormatter.LowercaseHex">
            <summary>
            An instance preconfigured to emit lowercase hex values.
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordDataFormatter.Default">
            <summary>
            The default (uppercase) method of emitting an SRecordData.
            </summary>
        </member>
        <member name="M:Jcd.SRecord.SRecordDataFormatter.Format(Jcd.SRecord.SRecordData)">
            <summary>
            Converts an SRecordData into its ASCII-HEX representation.
            </summary>
            <param name="sRecord">the record to format</param>
            <returns>The formatted string (S0030000FC...etc)</returns>
        </member>
        <member name="T:Jcd.SRecord.SRecordDataParser">
            <summary>
            Provides facilities for parsing the textual SRecordData format into its
            binary representation.
            </summary>
        </member>
        <member name="M:Jcd.SRecord.SRecordDataParser.#ctor(System.Collections.Generic.IDictionary{System.String,Jcd.SRecord.SRecordDataType})">
            <summary>
            Constructs an SRecordDataParser from a defined sRecord type lookup table.
            </summary>
            <param name="typeLookup">The S0-S9 definitions used during parsing.</param>
        </member>
        <member name="M:Jcd.SRecord.SRecordDataParser.Parse(System.String)">
            <summary>
            Parses a line of text into an <c>SRecordData, ignoring trailing whitespace.</c>
            </summary>
            <param name="lineOfText">The line of text to parse.</param>
            <returns>An <c>SRecordData</c> instance if it was successfully parsed.</returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Jcd.SRecord.SRecordDataParser.TryParse(System.String,Jcd.SRecord.SRecordData@)">
            <summary>
            Tries parsing a line of text into an <c>SRecordData</c>
            </summary>
            <param name="lineOfText">the text to try parsing.</param>
            <param name="sRecord">The result of parsing. null if not parsed.</param>
            <returns>true if successful</returns>
        </member>
        <member name="F:Jcd.SRecord.SRecordDataParser.Strict">
            <summary>
            An instance configured to use Strict definitions.
            </summary>
        </member>
        <member name="F:Jcd.SRecord.SRecordDataParser.Flexible">
            <summary>
            An instance configured to use Flexible definitions.
            </summary>
        </member>
        <member name="F:Jcd.SRecord.SRecordDataParser.Default">
            <summary>
            An default instance. This is the same as Flexible.
            </summary>
        </member>
        <member name="M:Jcd.SRecord.SRecordDataParser.Create(System.Byte)">
            <summary>
            Creates a new instance of an SRecordDataParser configured to parse records
            containing the configured maxDataBytesPerRecord.
            </summary>
            <remarks>When maxDataBytesPerRecord is greater than 250, the Flexible instance is used instead of creating a new one.</remarks>
            <param name="maxDataBytesPerRecord"></param>
            <returns>The new, or stock, instance of the SRecordDataParser</returns>
        </member>
        <member name="T:Jcd.SRecord.SRecordDataStatistics">
            <summary>
            Represents summary information about the contents of
            an any collection of SRecordData.
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordDataStatistics.DataLengthCounts">
            <summary>
            A cache of the number of times a data bearing record
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordDataStatistics.S0Count">
            <summary>
            The count of all S0 records.
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordDataStatistics.S1Count">
            <summary>
            The count of all S1 records.
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordDataStatistics.S2Count">
            <summary>
            The count of all S2 records.
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordDataStatistics.S3Count">
            <summary>
            The count of all S3 records.
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordDataStatistics.S4Count">
            <summary>
            The count of all S4 records.
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordDataStatistics.S5Count">
            <summary>
            The count of all S5 records.
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordDataStatistics.S6Count">
            <summary>
            The count of all S6 records.
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordDataStatistics.S7Count">
            <summary>
            The count of all S7 records.
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordDataStatistics.S8Count">
            <summary>
            The count of all S0 records.
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordDataStatistics.S9Count">
            <summary>
            The count of all S0 records.
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordDataStatistics.MaximumDataLength">
            <summary>
            The maximum value of any SRecordData.Data.Length entry
            -1 means there are no entries.
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordDataStatistics.HeaderCount">
            <summary>
            The same as S0Count, a convenience getter.
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordDataStatistics.DataRecordCount">
            <summary>
            The count of all S1, S2, and S3 records.
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordDataStatistics.CounterRecordCount">
            <summary>
            The count of all S5 and S6 records. (Ideally 0 or 1!)
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordDataStatistics.StartAddressRecordCount">
            <summary>
            The count of all S7, S8 and S9 records. (Ideally only 1!)
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordDataStatistics.TotalSRecordDataCount">
            <summary>
            A count of all the SRecord entries these statistics account for.
            </summary>
        </member>
        <member name="M:Jcd.SRecord.SRecordDataStatistics.Reset">
            <summary>
            Resets all properties to 0;
            </summary>
        </member>
        <member name="M:Jcd.SRecord.SRecordDataStatistics.Increment(Jcd.SRecord.SRecordData)">
            <summary>
            Increments the statistics based on the passed in record.
            </summary>
            <param name="record">record</param>
        </member>
        <member name="M:Jcd.SRecord.SRecordDataStatistics.Decrement(Jcd.SRecord.SRecordData)">
            <summary>
            Decrements the statistics based on the passed in record.
            </summary>
            <param name="record"></param>
        </member>
        <member name="T:Jcd.SRecord.SRecordDataType">
            <summary>
            Represents the information required to identify and process various types of SRecords
            <see href="https://manpages.ubuntu.com/manpages/trusty/man5/srec.5.html">
            as documented here
            </see>
            </summary>
        </member>
        <member name="M:Jcd.SRecord.SRecordDataType.CreateLookup(System.Byte)">
            <summary>
            Creates a lookup table of <c>SRecordDataType</c>s.
            </summary>
            <param name="dataBytesPerRecord">The number of data bytes you want any S1,S2, or S3 record to hold.</param>
            <returns>Returns a lookup table for record types.</returns>
        </member>
        <member name="F:Jcd.SRecord.SRecordDataType.KeyLength">
            <summary>
            The length of the key in characters.
            </summary>
        </member>
        <member name="F:Jcd.SRecord.SRecordDataType.RecordStartCharacter">
            <summary>
            The mandatory character that all SRecordData types must start with 'S'. 
            </summary>
        </member>
        <member name="F:Jcd.SRecord.SRecordDataType.Key">
            <summary>
            The key for the type.
            </summary>
        </member>
        <member name="F:Jcd.SRecord.SRecordDataType.AddressLengthInBytes">
            <summary>
            The number of bytes used to represent the address.
            </summary>
        </member>
        <member name="F:Jcd.SRecord.SRecordDataType.MaximumDataBytesAllowed">
            <summary>
            The maximum number of bytes allowed in the data section for this type.
            </summary>
        </member>
        <member name="F:Jcd.SRecord.SRecordDataType.IsValid">
            <summary>
            Indicates if the type is valid and recognized. 
            </summary>
            <remarks>
            This is set by whatever is constructing the type. Usually this will be set
            at compile time. See, <c>Strict</c> and <c>Flexible</c> for examples.
            </remarks>
        </member>
        <member name="F:Jcd.SRecord.SRecordDataType.RequiresSpecialHandling">
            <summary>
            Indicates if the type requires special (i.e. non-standard handling. e.g. S4)
            </summary>
        </member>
        <member name="M:Jcd.SRecord.SRecordDataType.#ctor(System.String,System.Byte,System.Byte,System.Boolean,System.Boolean)">
            <summary>
            Constructs an SRecordDataType, which identifies how to properly process and/or parse
            an SRecordData of the specified type, provided the key, address length, and
            maximum data bytes allowed.
            </summary>
            <remarks>
            This constructor is only intended to be used by people who will use it correctly.
            Typically you'll want to use Strict.FromKey or Flexible.FromKey instead.
            </remarks>
            <param name="key">The two character SRecordData identifier. (S0..S9)</param>
            <param name="addressLengthInBytes">The byte length of the address</param>
            <param name="maximumDataBytesAllowed">The maximum number of data bytes allowed.</param>
            <param name="requiresSpecialHandling">Indicates if the type requires special handling. (S4 does)</param>
            <param name="isValid">Indicates if parsing recognized the key.</param>
        </member>
        <member name="M:Jcd.SRecord.SRecordDataType.#ctor(System.String,System.Byte,System.Boolean,System.Boolean)">
            <summary>
            Constructs an SRecordDataType, which identifies how to properly process and/or parse
            an SRecordData of the specified type, provided the key, address length. The maximum
            data length is computed from the following formula:
            MaximumDataBytesAllowed = SRecordData.MaxValueForCount - SRecordData.CheckSumByteLength - addressLengthInBytes;
            </summary>
            <remarks>
            This constructor is only intended to be used by people who will use it correctly.
            Typically you'll want to use Strict.FromKey or Flexible.FromKey instead.
            </remarks>
            <param name="key">The two character SRecordData identifier. (S0..S9)</param>
            <param name="addressLengthInBytes">The byte length of the address</param>
            <param name="requiresSpecialHandling">Indicates if the type requires special handling. (S4 does)</param>
            <param name="isValid">Indicates if parsing recognized the key.</param>
        </member>
        <member name="M:Jcd.SRecord.SRecordDataType.Equals(Jcd.SRecord.SRecordDataType)">
            <inheritdoc />
        </member>
        <member name="M:Jcd.SRecord.SRecordDataType.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Jcd.SRecord.SRecordDataType.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Jcd.SRecord.SRecordDataType.op_Equality(Jcd.SRecord.SRecordDataType,Jcd.SRecord.SRecordDataType)">
            <summary>
            Compares two operands to determine if they're equal.
            </summary>
            <param name="left">the left hand operand</param>
            <param name="right">the right hand operand</param>
            <returns>True if they are equal</returns>
        </member>
        <member name="M:Jcd.SRecord.SRecordDataType.op_Inequality(Jcd.SRecord.SRecordDataType,Jcd.SRecord.SRecordDataType)">
            <summary>
            Compares two operands to determine if they're not equal.
            </summary>
            <param name="left">the left hand operand</param>
            <param name="right">the right hand operand</param>
            <returns>True if they are not equal</returns>
        </member>
        <member name="T:Jcd.SRecord.SRecordDataType.Flexible">
            <summary>
            Provides a collection and lookup mechanism for instances of <see cref="T:Jcd.SRecord.SRecordDataType"/>
            configured to accept a flexible number of data bytes per record. The exact amount
            allowed varies per type and is 254 bytes minus the address length in bytes, for S0,
            S1, S2, S3, and S4. NOTE: S4 types always require special, implementation defined, handling.
            </summary>
        </member>
        <member name="F:Jcd.SRecord.SRecordDataType.Flexible.S0">
            <summary>
            The identifier for S0 records. Address is 2 bytes, should always be 0. Maximum data bytes allowed 252 bytes.
            </summary>
            <remarks>
            This record contains vendor specific ASCII text comment represented as a series of hex digit pairs.
            There is a spec, seldom conformed to, outlined in the <see href="https://manpages.ubuntu.com/manpages/trusty/man5/srec.5.html">Ubuntu manpage</see>.
            </remarks>
        </member>
        <member name="F:Jcd.SRecord.SRecordDataType.Flexible.S1">
            <summary>
            The identifier for S1 records. Address is 2 bytes. Maximum data bytes allowed 252 bytes.
            </summary>
            <remarks>
            This record type contains data that starts at the 16-bit address field.
            </remarks>
        </member>
        <member name="F:Jcd.SRecord.SRecordDataType.Flexible.S2">
            <summary>
            The identifier for S2 records. Address is 3 bytes. Maximum data bytes allowed 251 bytes.
            </summary>
            <remarks>
            This record type contains data that starts at a 24-bit address.
            </remarks>
        </member>
        <member name="F:Jcd.SRecord.SRecordDataType.Flexible.S3">
            <summary>
            The identifier for S3 records. Address is 4 bytes. Maximum data bytes allowed 250 bytes.
            </summary>
            <remarks>
            This record type contains data that starts at a 32-bit address.
            </remarks>
        </member>
        <member name="F:Jcd.SRecord.SRecordDataType.Flexible.S4">
            <summary>
            The identifier for S4 records. Address is 4 bytes. Maximum data bytes allowed 250 bytes.
            </summary>
            <remarks>
            Special handling required. This is vendor defined/reserved.
            </remarks>
        </member>
        <member name="F:Jcd.SRecord.SRecordDataType.Flexible.S5">
            <summary>
            The identifier for S5 records. Address is 2 bytes. No data allowed.
            </summary>
            <remarks>
            This record type is used to contain a 16-bit count of all S1, S2, or S3 records,
            stored in the address field. There are no data bytes for this record type.
            This record is used if the record count is less than or equal to 65,535 (0xFFFF).
            </remarks>
        </member>
        <member name="F:Jcd.SRecord.SRecordDataType.Flexible.S6">
            <summary>
            The identifier for S6 records. Address is 3 bytes. No data allowed.
            </summary>
            <remarks>
            This record type is used to contain a 24-bit count of all S1, S2, or S3 records,
            stored in the address field. There are no data bytes for this record type.
            This record is used if the record count is less than or equal to 16,777,215 (0xFFFFFF) and 
            greater than 65,535 (0xFFFF) records.
            </remarks>
        </member>
        <member name="F:Jcd.SRecord.SRecordDataType.Flexible.S7">
            <summary>
            The identifier for S7 records. Address is 4 bytes.  No data allowed.
            This is used to terminate a series of S3 records. 
            </summary>
            <remarks>
            If an SRecordData file is only used to program a memory device and the execution location
            is ignored, then an address of zero could be used.
            </remarks>
        </member>
        <member name="F:Jcd.SRecord.SRecordDataType.Flexible.S8">
            <summary>
            The identifier for S8 records. Address is 3 bytes. No data allowed.
            This is used to terminate a series of S2 records.
            </summary>
            <remarks>
            If an SRecordData file is only used to program a memory device and the execution location
            is ignored, then an address of zero could be used.
            </remarks>
        </member>
        <member name="F:Jcd.SRecord.SRecordDataType.Flexible.S9">
            <summary>
            The identifier for S8 records. Address is 3 bytes. Maximum data bytes allowed 32 bytes.
            </summary>
            <remarks>
            This is used to terminate a series of S1 records. If a SRecordData file is only used to program
            a memory device and the execution location is ignored, then an address of zero could be used.
            </remarks>
        </member>
        <member name="F:Jcd.SRecord.SRecordDataType.Flexible.TypeLookup">
            <summary>
            A key-based lookup for known Flexible (250-252 byte data max depending on record type) <c>SRecordDataType</c> instances.
            </summary>
        </member>
        <member name="M:Jcd.SRecord.SRecordDataType.Flexible.FromKey(System.String)">
            <summary>
            Given a key, return an SRecordDataType instance describing it.
            Invalid keys will return  
            </summary>
            <param name="key"></param>
            <returns>A matching <c>SRecordDataType</c> or a new instance with IsValid set to false.</returns>
        </member>
        <member name="T:Jcd.SRecord.SRecordDataType.Strict">
            <summary>
            Provides a collection and lookup mechanism for instances of <see cref="T:Jcd.SRecord.SRecordDataType"/>
            configured to accept a maximum of 32 data bytes per record for S0, S1, S2, S3, and S4
            record types. NOTE: S4 types always require special, implementation defined, handling.
            </summary>
        </member>
        <member name="F:Jcd.SRecord.SRecordDataType.Strict.MaxDataLength">
            <summary>
            The maximum data any data bearing record may have
            </summary>
        </member>
        <member name="F:Jcd.SRecord.SRecordDataType.Strict.S0">
            <summary>
            The identifier for S0 records. Address is 2 bytes, should always be 0. Maximum data bytes allowed 32 bytes.
            </summary>
            <remarks>
            This record contains vendor specific ASCII text comment represented as a series of hex digit pairs.
            There is a spec, seldom conformed to, outlined in the <see href="https://manpages.ubuntu.com/manpages/trusty/man5/srec.5.html">Ubuntu manpage</see>.
            </remarks>
        </member>
        <member name="F:Jcd.SRecord.SRecordDataType.Strict.S1">
            <summary>
            The identifier for S1 records. Address is 2 bytes. Maximum data bytes allowed 32 bytes.
            </summary>
            <remarks>
            This record type contains data that starts at the 16-bit address field.
            </remarks>
        </member>
        <member name="F:Jcd.SRecord.SRecordDataType.Strict.S2">
            <summary>
            The identifier for S2 records. Address is 3 bytes. Maximum data bytes allowed 32 bytes.
            </summary>
            <remarks>
            This record type contains data that starts at a 24-bit address.
            </remarks>
        </member>
        <member name="F:Jcd.SRecord.SRecordDataType.Strict.S3">
            <summary>
            The identifier for S3 records. Address is 4 bytes. Maximum data bytes allowed 32 bytes.
            </summary>
            <remarks>
            This record type contains data that starts at a 32-bit address.
            </remarks>
        </member>
        <member name="F:Jcd.SRecord.SRecordDataType.Strict.S4">
            <summary>
            The identifier for S4 records. Address is 4 bytes. Maximum data bytes allowed 32 bytes.
            </summary>
            <remarks>
            Special handling required. This is vendor defined/reserved.
            </remarks>
        </member>
        <member name="F:Jcd.SRecord.SRecordDataType.Strict.S5">
            <summary>
            The identifier for S5 records. Address is 2 bytes. No data allowed.
            </summary>
            <remarks>
            This record type is used to contain a 16-bit count of all S1, S2, or S3 records,
            stored in the address field. There are no data bytes for this record type.
            This record is used if the record count is less than or equal to 65,535 (0xFFFF).
            </remarks>
        </member>
        <member name="F:Jcd.SRecord.SRecordDataType.Strict.S6">
            <summary>
            The identifier for S6 records. Address is 3 bytes. No data allowed.
            </summary>
            <remarks>
            This record type is used to contain a 24-bit count of all S1, S2, or S3 records,
            stored in the address field. There are no data bytes for this record type.
            This record is used if the record count is less than or equal to 16,777,215 (0xFFFFFF) and 
            greater than 65,535 (0xFFFF) records.
            </remarks>
        </member>
        <member name="F:Jcd.SRecord.SRecordDataType.Strict.S7">
            <summary>
            The identifier for S7 records. Address is 4 bytes. No data allowed.
            This is used to terminate a series of S3 records. 
            </summary>
            <remarks>
            If an SRecordData file is only used to program a memory device and the execution location
            is ignored, then an address of zero could be used.
            </remarks>
        </member>
        <member name="F:Jcd.SRecord.SRecordDataType.Strict.S8">
            <summary>
            The identifier for S8 records. Address is 3 bytes.  No data allowed.
            This is used to terminate a series of S2 records.
            </summary>
            <remarks>
            If an SRecordData file is only used to program a memory device and the execution location
            is ignored, then an address of zero could be used.
            </remarks>
        </member>
        <member name="F:Jcd.SRecord.SRecordDataType.Strict.S9">
            <summary>
            The identifier for S8 records. Address is 3 bytes.  No data allowed.
            </summary>
            <remarks>
            This is used to terminate a series of S1 records. If a SRecordData file is only used to program
            a memory device and the execution location is ignored, then an address of zero could be used.
            </remarks>
        </member>
        <member name="F:Jcd.SRecord.SRecordDataType.Strict.TypeLookup">
            <summary>
            A key-based lookup for known Strict (32 byte data max) <c>SRecordDataType</c> instances.
            </summary>
        </member>
        <member name="M:Jcd.SRecord.SRecordDataType.Strict.FromKey(System.String)">
            <summary>
            Given a key, return an SRecordDataType instance describing it.
            Invalid keys will return  
            </summary>
            <param name="key"></param>
            <returns>A matching <c>SRecordDataType</c> or a new instance with IsValid set to false.</returns>
        </member>
        <member name="T:Jcd.SRecord.SRecordDocument">
            <summary>
            Represents an SRecordData document. This is a simple document reader/writer.
            No S37, or other semantics are enforced.
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordDocument.Elements">
            <summary>
            Gets a mutable collection of <c>SRecordElement</c>s contained in this document.
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordDocument.SRecords">
            <summary>
            Gets an immutable collection of just the SRecordData entries contained in the Elements collection.
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordDocument.Parser">
            <summary>
            Gets the instance of the parser in use by this <c>SRecordDocument</c>. 
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordDocument.Formatter">
            <summary>
            Gets the instance of the formatter used by this <c>SRecordDocument</c>.
            </summary>
        </member>
        <member name="M:Jcd.SRecord.SRecordDocument.#ctor(Jcd.SRecord.ISRecordElementParser,Jcd.SRecord.ISRecordElementFormatter)">
            <summary>
            Creates an instance of an <c>SRecordDocument</c>.
            </summary>
            <param name="parser">The parser to use for parsing <c>SRecordElement</c> text. If null the default one is used.</param>
            <param name="formatter">The formatter to use when writing <c>SRecordElement</c>s. If null the default one is used.</param>
        </member>
        <member name="M:Jcd.SRecord.SRecordDocument.Read(Jcd.SRecord.SRecordElementReader)">
            <summary>
            Reads all of the remaining <c>SRecordElement</c> entries 
            from the <c>SRecordElementReader</c>
            </summary>
            <param name="reader">The element reader.</param>
        </member>
        <member name="M:Jcd.SRecord.SRecordDocument.ReadAsync(Jcd.SRecord.SRecordElementReader)">
            <summary>
            Asynchronously reads all of the remaining <c>SRecordElement</c> entries 
            from the <c>SRecordElementReader</c>
            </summary>
            <param name="reader">The element reader.</param>
        </member>
        <member name="M:Jcd.SRecord.SRecordDocument.Write(Jcd.SRecord.SRecordElementWriter)">
            <summary>
            Writes all of the <c>SRecordElement</c>s in this document to the
            <c>SRecordElementWriter</c>
            </summary>
            <param name="writer">The <c>SRecordElementWriter</c> instance to write to.</param>
        </member>
        <member name="M:Jcd.SRecord.SRecordDocument.WriteAsync(Jcd.SRecord.SRecordElementWriter)">
            <summary>
            Asynchronously writes all of the <c>SRecordElement</c>s in this document to the
            <c>SRecordElementWriter</c>
            </summary>
            <param name="writer">The <c>SRecordElementWriter</c> instance to write to.</param>
        </member>
        <member name="M:Jcd.SRecord.SRecordDocument.CreateFromFile(System.String,Jcd.SRecord.ISRecordElementParser,Jcd.SRecord.ISRecordElementFormatter)">
            <summary>
            Creates a <c>SRecordDocument</c> using the provided parser and formatter
            Then loads data from the specified file path.
            </summary>
            <param name="filePath">The file to read.</param>
            <param name="parser">The parser. If null the default one is used.</param>
            <param name="formatter">The formatter to used. If null the default one is used.</param>
            <returns>The new <c>SRecordDocument</c> instance</returns>
        </member>
        <member name="M:Jcd.SRecord.SRecordDocument.CreateFromFileAsync(System.String,Jcd.SRecord.ISRecordElementParser,Jcd.SRecord.ISRecordElementFormatter)">
            <summary>
            Creates the <c>SRecordDocument</c> using the provided parser and formatter
            Then asynchronously loads data from the specified file path.
            </summary>
            <param name="filePath">The file to read.</param>
            <param name="parser">The parser. If null the default one is used.</param>
            <param name="formatter">The formatter to used. If null the default one is used.</param>
            <returns>The new <c>SRecordDocument</c> instance</returns>
        </member>
        <member name="M:Jcd.SRecord.SRecordDocument.LoadFileAsync(System.String)">
            <summary>
            Asynchronously loads data from the specified file path into the current
            <c>SRecordDocument</c>. This appends to any existing entries.
            </summary>
            <param name="filePath">The file to read.</param>
        </member>
        <member name="M:Jcd.SRecord.SRecordDocument.LoadFile(System.String)">
            <summary>
            Loads data from the specified file path into the current
            <c>SRecordDocument</c>. This appends to any existing entries.
            </summary>
            <param name="filePath">The file to read.</param>
        </member>
        <member name="M:Jcd.SRecord.SRecordDocument.WriteFile(System.String)">
            <summary>
            Creates or replaces a file at the specified path and writes
            all of the formatted <c>SRecordElement</c> data into the file.
            </summary>
            <param name="filePath">The path of the file to write.</param>
        </member>
        <member name="M:Jcd.SRecord.SRecordDocument.WriteFileAsync(System.String)">
            <summary>
            Asynchronously creates or replaces a file at the specified path and the
            writes all of the formatted <c>SRecordElement</c> data into the file.
            </summary>
            <param name="filePath">The path of the file to write.</param>
        </member>
        <member name="M:Jcd.SRecord.SRecordDocument.CreateFromString(System.String,Jcd.SRecord.ISRecordElementParser,Jcd.SRecord.ISRecordElementFormatter)">
            <summary>
            Creates a <c>SRecordDocument</c> using the provided parser and formatter
            Then loads data from the string.
            </summary>
            <param name="text">The string to load.</param>
            <param name="parser">The parser. If null the default one is used.</param>
            <param name="formatter">The formatter to used. If null the default one is used.</param>
            <returns>The new <c>SRecordDocument</c> instance</returns>
        </member>
        <member name="M:Jcd.SRecord.SRecordDocument.LoadString(System.String)">
            <summary>
            Loads data from the provided string into the current  <c>SRecordDocument</c>.
            This appends to any existing entries.
            </summary>
            <param name="text">The string to load.</param>
        </member>
        <member name="M:Jcd.SRecord.SRecordDocument.ToString">
            <inheritdoc />
        </member>
        <member name="T:Jcd.SRecord.SRecordElement">
            <summary>
            Represents a single line in an <c>SRecordDocument</c>
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordElement.LineNumber">
            <summary>
            The line in the file where the text was found.
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordElement.SRecordData">
            <summary>
            The SRecordData parsed from the line (if any) 
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordElement.Comment">
            <summary>
            The comment text (lines starting with a ';' '#' ...etc are comment lines.) 
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordElement.ElementType">
            <summary>
            True if the line recognized as an SRecordData and/or comment. False otherwise.
            When false, OriginalLine should be populated with the extracted line of text, without end of line character(s).
            Also, ErrorMessage should be populated with the error encountered while trying to parse the line. 
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordElement.OriginalLine">
            <summary>
            The original line of text. A well constructed parser will always provide this. The default one does.
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordElement.ErrorMessage">
            <summary>
            Contains a parser specific error message associated with attempting to parse this line.
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordElement.Exception">
            <summary>
            An exception that happened while trying to parse the line of text.
            </summary>
        </member>
        <member name="M:Jcd.SRecord.SRecordElement.#ctor(System.Int32,Jcd.SRecord.SRecordElementType,Jcd.SRecord.SRecordData,System.String,System.String,System.String,System.Exception)">
            <summary>
            Constructs an instance of an <c>SRecordElement</c>
            </summary>
            <param name="lineNumber">The line number in the file.</param>
            <param name="elementType">The elementType of line.</param>
            <param name="sRecord">the parsed and validated <c>SRecordData</c> instance.</param>
            <param name="comment">The comment text, without the comment character.</param>
            <param name="originalLine">The original full text of the line.</param>
            <param name="errorMessage">An error message, populated when elementType is false.</param>
            <param name="exception">An exception that occurred during parsing of the SRecordData entry.</param>
        </member>
        <member name="T:Jcd.SRecord.SRecordElementFormattedEventArgs">
            <inheritdoc />
        </member>
        <member name="P:Jcd.SRecord.SRecordElementFormattedEventArgs.Succeeded">
            <summary>
            Gets a flag indicating if the formatting attempt was successful.
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordElementFormattedEventArgs.Element">
            <summary>
            Gets the element that was formatted. 
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordElementFormattedEventArgs.FormattedText">
            <summary>
            Gets the text resulting from formatting.
            </summary>
        </member>
        <member name="M:Jcd.SRecord.SRecordElementFormattedEventArgs.#ctor(System.Boolean,Jcd.SRecord.SRecordElement,System.String)">
            <summary>
            Constructs an instance of <c>SRecordElementFormattedEventArgs</c>
            </summary>
            <param name="succeeded">A flag indicating if the formatting attempt was successful.</param>
            <param name="element">The element that was formatted.</param>
            <param name="formattedText">The text resulting from formatting.</param>
        </member>
        <member name="T:Jcd.SRecord.SRecordElementFormatter">
            <summary>
            Encapsulates the logic necessary to format an <c>SRecordElement</c>
            as a line of text.
            </summary>
        </member>
        <member name="F:Jcd.SRecord.SRecordElementFormatter.Default">
            <summary>
            Gets the default instance of <c>SRecordElementFormatter</c> 
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordElementFormatter.CurrentOptions">
            <summary>
            Gets the currently configured options.
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordElementFormatter.RecordFormatter">
            <summary>
            Gets the currently configured <c>ISRecordDataFormatter</c>
            </summary>
        </member>
        <member name="M:Jcd.SRecord.SRecordElementFormatter.#ctor(System.Nullable{Jcd.SRecord.SRecordElementFormatter.Options},Jcd.SRecord.ISRecordDataFormatter)">
            <summary>
            Constructs an instance of <c>SRecordElementFormatter</c> with the specified
            options and <c>ISRecordDataFormatter</c>.
            </summary>
            <param name="options">The options to use, if null, <c>Options.DefaultOptions</c> is used.</param>
            <param name="recordFormatter">The ISRecordDataFormatter to use. If null, <c>SRecordDataFormatter.UppercaseHex</c> is used.</param>
        </member>
        <member name="M:Jcd.SRecord.SRecordElementFormatter.Format(Jcd.SRecord.SRecordElement)">
            <inheritdoc />
        </member>
        <member name="E:Jcd.SRecord.SRecordElementFormatter.Formatting">
            <inheritdoc />
        </member>
        <member name="E:Jcd.SRecord.SRecordElementFormatter.Formatted">
            <inheritdoc />
        </member>
        <member name="T:Jcd.SRecord.SRecordElementFormatter.Options">
            <summary>
            Represents the formatting options desired when writing <c>SRecordElement</c> contents
            to an <c>SRecordElementWriter</c>.
            </summary>
        </member>
        <member name="F:Jcd.SRecord.SRecordElementFormatter.Options.EmitOriginalText">
            <summary>
            Tells the formatter to ignore all other directives, and just emit the original line of text.
            </summary>
        </member>
        <member name="F:Jcd.SRecord.SRecordElementFormatter.Options.EmitComment">
            <summary>
            Tells the formatter if end of line comments should be emitted.
            </summary>
        </member>
        <member name="F:Jcd.SRecord.SRecordElementFormatter.Options.EmitSRecordContent">
            <summary>
            Tells the formatter to emit the SRecordData when present. This is usually true.
            </summary>
        </member>
        <member name="F:Jcd.SRecord.SRecordElementFormatter.Options.EmitSpaceBeforeEndOfLineComment">
            <summary>
            Tells the formatter if a space should be emitted before an end of line comment.
            </summary>
        </member>
        <member name="F:Jcd.SRecord.SRecordElementFormatter.Options.EmitErrorLineAsCommentLine">
            <summary>
            Indicates if the formatter should emit an error line as a commented out line.
            In order for a comment line to be emitted, EmitComment must also be true.
            If false, a blank line or null will be generated for error lines (depending on blank line handling).
            </summary>
        </member>
        <member name="F:Jcd.SRecord.SRecordElementFormatter.Options.EmitBlankLineAsEmptyString">
            <summary>
            Indicates if the formatter should emit a blank line as an empty string or null.
            When false, lines that would format to an empty string, become null instead.
            </summary>
        </member>
        <member name="F:Jcd.SRecord.SRecordElementFormatter.Options.CommentCharacter">
            <summary>
            The character to use when emitting a comment.
            </summary>
        </member>
        <member name="M:Jcd.SRecord.SRecordElementFormatter.Options.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Char)">
            <summary>
            Constructs a set of options to control the behavior of SRecordElementFormatter.
            </summary>
            <param name="emitSRecordContent">Tells the formatter to emit the SRecordData when present.</param>
            <param name="emitComment">Tells the formatter if end of line comments should be emitted.</param>
            <param name="emitSpaceBeforeEndOfLineComment"></param>
            <param name="emitOriginalText">Tells the formatter to ignore all other directives, and just emit the original line of text.</param>
            <param name="emitBlankLineAsEmptyString"></param>
            <param name="emitErrorLineAsCommentLine"></param>
            <param name="commentCharacter"></param>
        </member>
        <member name="F:Jcd.SRecord.SRecordElementFormatter.Options.OnlyEmitSRecordData">
            <summary>
            A convenience instance that is configured to only emit <c>SRecordData</c> line and only the <c>SRecordData</c> data.
            </summary>
        </member>
        <member name="F:Jcd.SRecord.SRecordElementFormatter.Options.OnlyEmitCommentData">
            <summary>
            A convenience instance that is configured to only emit comment data.
            </summary>
        </member>
        <member name="F:Jcd.SRecord.SRecordElementFormatter.Options.EmitSRecordAndCommentData">
            <summary>
            A convenience instance that is configured to emit <c>SRecordData</c> line and comment data.
            </summary>
        </member>
        <member name="F:Jcd.SRecord.SRecordElementFormatter.Options.EmitSRecordAndCommentDataWithSpace">
            <summary>
            A convenience instance that is configured to emit <c>SRecordData</c>
            line and comment data. For end of line comments after <c>SRecordData</c>
            data, a space is inserted before the comment character.
            </summary>
        </member>
        <member name="F:Jcd.SRecord.SRecordElementFormatter.Options.CommentOutErrorLines">
            <summary>
            A convenience instance that is configured to emit <c>SRecordData</c> line and comment data.
            As well <c>SRecordElement</c>s flagged as having an error will be emitted as commented out
            lines. (SRecordElement.OriginalLine is used, otherwise preserving the whole line.) 
            </summary>
        </member>
        <member name="F:Jcd.SRecord.SRecordElementFormatter.Options.OnlyEmitOriginalText">
            <summary>
            A convenience instance that is configured to only emit the original text.
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordElementFormatter.Options.DefaultOptions">
            <summary>
            See <c>EmitSRecordAndCommentDataWithSpace</c>
            </summary>
        </member>
        <member name="T:Jcd.SRecord.SRecordElementFormattingEventArgs">
            <inheritdoc />
        </member>
        <member name="P:Jcd.SRecord.SRecordElementFormattingEventArgs.Element">
            <summary>
            The element to be formatted.
            </summary>
        </member>
        <member name="M:Jcd.SRecord.SRecordElementFormattingEventArgs.#ctor(Jcd.SRecord.SRecordElement)">
            <summary>
            Constructs a <c>SRecordElementFormattingEventArgs</c> instance.
            </summary>
            <param name="element">The element to be formatted.</param>
        </member>
        <member name="T:Jcd.SRecord.SRecordElementParsedEventArgs">
            <inheritdoc />
        </member>
        <member name="P:Jcd.SRecord.SRecordElementParsedEventArgs.Element">
            <summary>
            The parsed element containing the results of parsing.
            (successful, type parsed, error, error message, exception...etc.)
            </summary>
        </member>
        <member name="M:Jcd.SRecord.SRecordElementParsedEventArgs.#ctor(Jcd.SRecord.SRecordElement)">
            <summary>
            Constructs an instance of <c>SRecordElementParsedEventArgs</c>.
            </summary>
            <param name="element">The parsed element containing the results of parsing.</param>
        </member>
        <member name="T:Jcd.SRecord.SRecordElementParser">
            <summary>
            Provides a default mechanism for parsing a line of text into
            an <c>SRecordElement</c>.
            </summary>
        </member>
        <member name="E:Jcd.SRecord.SRecordElementParser.Parsing">
            <summary>
            An event indicating parsing of a line of text has begun.
            The data on the argument is the original line of text.
            </summary>
        </member>
        <member name="E:Jcd.SRecord.SRecordElementParser.Parsed">
            <summary>
            An event indicating parsing has finished.
            The data on the argument is the element resulting from parsing.
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordElementParser.RecordParser">
            <summary>
            Gets the <c>ISRecordDataParser</c> instance used to parse the <c>SRecordData</c> data
            from a line of text.
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordElementParser.CommentCharacters">
            <summary>
            Gets a copy of the comment characters in use.
            </summary>
        </member>
        <member name="F:Jcd.SRecord.SRecordElementParser.DefaultCommentCharacters">
            <summary>
            The default set of comment characters we'll parse.
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordElementParser.Default">
            <summary>
            A default instance configured with reasonable, flexible, defaults. It should parse
            most any line.
            </summary>
        </member>
        <member name="F:Jcd.SRecord.SRecordElementParser.Flexible">
            <summary>
            An <c>SRecordElementParser</c> configured to accept either '#' or ';' as comment
            characters,  and to allow up to 250-252 (SRecordDataType dependent) data bytes in the
            <c>SRecordData</c> data.
            </summary>
        </member>
        <member name="F:Jcd.SRecord.SRecordElementParser.FlexibleNoComments">
            <summary>
            An <c>SRecordElementParser</c> configured to accept no comments, and to allow up
            to 250-252 (SRecordDataType dependent) data bytes in the <c>SRecordData</c> data.
            </summary>
        </member>
        <member name="F:Jcd.SRecord.SRecordElementParser.Strict">
            <summary>
            An <c>SRecordElementParser</c> configured to accept either '#' or ';' as comment
            characters,  and to allow up to 32 (SRecordDataType dependent) data bytes in the
            <c>SRecordData</c> data.
            </summary>
        </member>
        <member name="F:Jcd.SRecord.SRecordElementParser.StrictNoComments">
            <summary>
            An <c>SRecordElementParser</c> configured to accept no comments, and to allow up
            to 250-252 (SRecordDataType dependent) data bytes in the <c>SRecordData</c> data.
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordElementParser.AllowComments">
            <summary>
            Indicates if comments are allowed. To Allow comments pass a set of
            recognized comment characters in to the constructor. 
            </summary>
        </member>
        <member name="M:Jcd.SRecord.SRecordElementParser.#ctor(Jcd.SRecord.ISRecordDataParser,System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Constructs an <c>SRecordElementParser</c> from an <c>ISRecordDataParser</c>
            and an optional set of comment characters.
            </summary>
            <param name="sRecordParser">The ISRecordDataParser instance to use.</param>
            <param name="commentCharacters">The comment characters to accept when parsing.</param>
        </member>
        <member name="M:Jcd.SRecord.SRecordElementParser.Parse(System.Int32,System.String)">
            <summary>
            Parses a line of text into an SRecordElement.
            </summary>
            <param name="lineNumber">The line number.</param>
            <param name="lineOfText">The raw text.</param>
            <returns>an SRecordElement describing the parsing results.</returns>
        </member>
        <member name="T:Jcd.SRecord.SRecordElementParsingEventArgs">
            <inheritdoc />
        </member>
        <member name="P:Jcd.SRecord.SRecordElementParsingEventArgs.LineNumber">
            <summary>
            The line number for the line of text being parsed.
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordElementParsingEventArgs.OriginalLineOfText">
            <summary>
            The original line of text to parse.
            </summary>
        </member>
        <member name="M:Jcd.SRecord.SRecordElementParsingEventArgs.#ctor(System.Int32,System.String)">
            <summary>
            Constructs a new instance of <c>SRecordElementParsingEventArgs</c>
            </summary>
            <param name="lineNumber">The line number.</param>
            <param name="originalLineOfText">The original line of text.</param>
        </member>
        <member name="T:Jcd.SRecord.SRecordElementReader">
            <summary>
            A forward only <c>SRecordElement</c> stream/string reader.
            This class always disposes its TextReader when disposed.
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordElementReader.CurrentLine">
            <summary>
            The line number of the most recently read line.
            This is 0 if nothing has been read and number of the last line in the file,
            if all lines have been read.
            </summary>
        </member>
        <member name="M:Jcd.SRecord.SRecordElementReader.#ctor(System.String,Jcd.SRecord.ISRecordElementParser)">
            <summary>
            Constructs an <c>SRecordElementReader</c> from a block of text. The encoding is assumed to be UTF8.
            </summary>
            <param name="linesOfText">the block of text.</param>
            <param name="parser">the line parser.</param>
        </member>
        <member name="M:Jcd.SRecord.SRecordElementReader.#ctor(System.IO.Stream,Jcd.SRecord.ISRecordElementParser)">
            <summary>
            Constructs an <c>SRecordElementReader</c> from a stream.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="parser">The parser to use</param>
        </member>
        <member name="M:Jcd.SRecord.SRecordElementReader.#ctor(System.IO.Stream,System.Text.Encoding,Jcd.SRecord.ISRecordElementParser)">
            <summary>
            Constructs an <c>SRecordElementReader</c> from a stream.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="parser">The parser to use</param>
            <param name="encoding">The text encoding to use.</param>
        </member>
        <member name="M:Jcd.SRecord.SRecordElementReader.#ctor(System.IO.TextReader,Jcd.SRecord.ISRecordElementParser)">
            <summary>
            Constructs an <c>SRecordElementReader</c> from a stream reader and line parser.
            </summary>
            <param name="textReader">The reader</param>
            <param name="parser">The parser</param>
        </member>
        <member name="M:Jcd.SRecord.SRecordElementReader.ReadToEnd">
            <summary>
            Get an enumerable of <c>SRecordElement</c>s from the input stream from the current position.
            </summary>
            <returns>an enumerable of <c>SRecordElement</c>s from the input stream</returns>
        </member>
        <member name="M:Jcd.SRecord.SRecordElementReader.ReadToEndAsync">
            <summary>
            Get an enumerable of <c>SRecordElement</c>s from the input stream, asynchronously
            </summary>
            <returns>an enumerable of <c>SRecordElement</c>s from the input stream</returns>
        </member>
        <member name="M:Jcd.SRecord.SRecordElementReader.Read">
            <summary>
            Reads an <c>SRecordElement</c> from the stream.
            </summary>
            <returns>The <c>SRecordElement</c>, null if end of stream has been reached.</returns>
        </member>
        <member name="M:Jcd.SRecord.SRecordElementReader.ReadAsync">
            <summary>
            Reads an <c>SRecordElement</c> from the stream.
            </summary>
            <returns>The <c>SRecordElement</c>, null if end of stream has been reached.</returns>
        </member>
        <member name="P:Jcd.SRecord.SRecordElementReader.EndOfData">
            <summary>
            Indicates if all of the data has been read.
            </summary>
        </member>
        <member name="M:Jcd.SRecord.SRecordElementReader.Dispose">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="T:Jcd.SRecord.SRecordElementStatistics">
            <summary>
            Represents a set of statistics about a set of <c>SRecordElement</c> instances.
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordElementStatistics.ErrorElementCount">
            <summary>
            The number of elements that were flagged as having an error.
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordElementStatistics.StandAloneCommentCount">
            <summary>
            The number of elements that just had comment data.
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordElementStatistics.SRecordDataWithCommentCount">
            <summary>
            The number of elements with both SRecordData and comments.
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordElementStatistics.ElementsWithCommentsCount">
            <summary>
            The total number of elements with comments.  
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordElementStatistics.BlankElementCount">
            <summary>
            The number of elements which were not in error but did not
            parse comments or SRecordData
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordElementStatistics.ElementsWithSRecordDataCount">
            <summary>
            The total number of elements that contained SRecordData
            </summary>
        </member>
        <member name="P:Jcd.SRecord.SRecordElementStatistics.TotalElementsCount">
            <summary>
             The total number of elements evaluated.
            </summary>
        </member>
        <member name="M:Jcd.SRecord.SRecordElementStatistics.Reset">
            <summary>
            Sets all datapoints to 0
            </summary>
        </member>
        <member name="M:Jcd.SRecord.SRecordElementStatistics.Increment(Jcd.SRecord.SRecordElement)">
            <summary>
            Increments the this instance's statistics based on the
            passed in element.
            </summary>
            <param name="element">The element to evaluate.</param>
        </member>
        <member name="M:Jcd.SRecord.SRecordElementStatistics.Decrement(Jcd.SRecord.SRecordElement)">
            <summary>
            Decrements the this instance's statistics based on the
            passed in element.
            </summary>
            <param name="element">The element to evaluate.</param>
        </member>
        <member name="T:Jcd.SRecord.SRecordElementType">
            <summary>
            Defines a set of flags that describe the results of parsing a line
            of text from an <c>SRecordDocument</c> 
            </summary>
        </member>
        <member name="F:Jcd.SRecord.SRecordElementType.HasComment">
            <summary>
            Indicates that the parsed data contains a comment. (This may be an empty string) 
            </summary>
        </member>
        <member name="F:Jcd.SRecord.SRecordElementType.HasSRecordData">
            <summary>
            Indicates that the parsed data contains <c>SRecordData</c> data.
            </summary>
        </member>
        <member name="F:Jcd.SRecord.SRecordElementType.IsBlank">
            <summary>
            Indicates that the parsed line was blank.
            </summary>
        </member>
        <member name="F:Jcd.SRecord.SRecordElementType.HasError">
            <summary>
            Indicates that an error occurred during parsing.
            </summary>
        </member>
        <member name="F:Jcd.SRecord.SRecordElementType.Comment">
            <summary>
            A single line comment.
            </summary>
        </member>
        <member name="F:Jcd.SRecord.SRecordElementType.SRecord">
            <summary>
            An SRecordData without a comment.
            </summary>
        </member>
        <member name="F:Jcd.SRecord.SRecordElementType.SRecordWithEndOfElementComment">
            <summary>
            An SRecordData with end of line comment.
            </summary>
        </member>
        <member name="F:Jcd.SRecord.SRecordElementType.Blank">
            <summary>
            A blank line (Empty or all whitespace.)
            </summary>
        </member>
        <member name="F:Jcd.SRecord.SRecordElementType.Error">
            <summary>
             Indicates if some error was detected while parsing the line.
            </summary>
        </member>
        <member name="F:Jcd.SRecord.SRecordElementType.ErrorWithComment">
            <summary>
             Indicates if some error was detected while parsing the line and an EOL comment was detected.
            </summary>
        </member>
        <member name="M:Jcd.SRecord.SRecordElementType.Equals(Jcd.SRecord.SRecordElementType)">
            <summary>
            Compares this instance to another.
            </summary>
            <param name="other">The other instance to compare to.</param>
            <returns>true if equal.</returns>
        </member>
        <member name="M:Jcd.SRecord.SRecordElementType.Equals(System.Object)">
            <summary>
            Compares this instance to another object.
            </summary>
            <param name="obj">The other instance to compare to.</param>
            <returns>true if equal.</returns>
        </member>
        <member name="M:Jcd.SRecord.SRecordElementType.GetHashCode">
            <summary>
            Generates a hashcode for the instance.
            </summary>
            <returns>The hashcode</returns>
        </member>
        <member name="M:Jcd.SRecord.SRecordElementType.op_Equality(Jcd.SRecord.SRecordElementType,Jcd.SRecord.SRecordElementType)">
            <summary>
            Compares two instances of <c>SRecordElementType</c> for equality.
            </summary>
            <param name="left">The left hand side of the comparison.</param>
            <param name="right">The right hand side of the comparison.</param>
            <returns>True if equal</returns>
        </member>
        <member name="M:Jcd.SRecord.SRecordElementType.op_Inequality(Jcd.SRecord.SRecordElementType,Jcd.SRecord.SRecordElementType)">
            <summary>
            Compares two instances of <c>SRecordElementType</c> for inequality.
            </summary>
            <param name="left">The left hand side of the comparison.</param>
            <param name="right">The right hand side of the comparison.</param>
            <returns>True if not equal</returns>
        </member>
        <member name="T:Jcd.SRecord.SRecordElementWriter">
            <summary>
            Writes <c>SRecordElement</c>s to a stream or <c>TextWriter</c>.
            </summary>
        </member>
        <member name="M:Jcd.SRecord.SRecordElementWriter.#ctor(System.IO.Stream,Jcd.SRecord.ISRecordElementFormatter)">
            <summary>
            Constructs an instance from a stream and element formatter. 
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="elementFormatter">The element formatter.</param>
        </member>
        <member name="M:Jcd.SRecord.SRecordElementWriter.#ctor(System.IO.Stream,System.Text.Encoding,Jcd.SRecord.ISRecordElementFormatter)">
            <summary>
            Constructs an instance from a stream, an encoding, and element formatter. 
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="encoding">The encoding to use.</param>
            <param name="elementFormatter">The element formatter.</param>
        </member>
        <member name="M:Jcd.SRecord.SRecordElementWriter.#ctor(System.IO.TextWriter,Jcd.SRecord.ISRecordElementFormatter)">
            <summary>
            Constructs an instance from a <c>StreamWriter</c> and an <c>ISRecordElementFormatter</c>
            </summary>
            <param name="streamWriter">The StreamWriter</param>
            <param name="elementFormatter">The element formatter</param>
            <exception cref="T:System.ArgumentNullException">Thrown when either parameter is null.</exception>
        </member>
        <member name="M:Jcd.SRecord.SRecordElementWriter.Write(Jcd.SRecord.SRecordElement)">
            <summary>
            Format and write an SRecordElement to the stream.
            </summary>
            <param name="element">the element to format and write.</param>
        </member>
        <member name="M:Jcd.SRecord.SRecordElementWriter.WriteAsync(Jcd.SRecord.SRecordElement)">
            <summary>
            Formats and writes a element to the stream, asynchronously.
            </summary>
            <param name="element">The element to write.</param>
        </member>
        <member name="M:Jcd.SRecord.SRecordElementWriter.Write(System.Collections.Generic.IEnumerable{Jcd.SRecord.SRecordElement})">
            <summary>
            Writes a set of lines to the stream.
            </summary>
            <param name="lines">The lines to write.</param>
        </member>
        <member name="M:Jcd.SRecord.SRecordElementWriter.WriteAsync(System.Collections.Generic.IEnumerable{Jcd.SRecord.SRecordElement})">
            <summary>
            Writes a set of lines to a stream, asynchronously.
            </summary>
            <param name="lines">The lines to write.</param>
        </member>
        <member name="M:Jcd.SRecord.SRecordElementWriter.WriteAsync(System.Collections.Generic.IAsyncEnumerable{Jcd.SRecord.SRecordElement})">
            <summary>
            Writes a set of lines, obtained asynchronously, to a stream, asynchronously.
            </summary>
            <param name="lines">The lines to write.</param>
        </member>
        <member name="M:Jcd.SRecord.SRecordElementWriter.Dispose">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
    </members>
</doc>
